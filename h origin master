[1mdiff --git a/Code/GameStateChecker/LogicLayer.py b/Code/GameStateChecker/LogicLayer.py[m
[1mindex bc82332..6aba12a 100644[m
[1m--- a/Code/GameStateChecker/LogicLayer.py[m
[1m+++ b/Code/GameStateChecker/LogicLayer.py[m
[36m@@ -272,11 +272,12 @@[m [mclass LogicLayer:[m
             if cv_params:[m
                 yaml_cv_params.update(cv_params)[m
                 [m
[31m-            # 从配置获取弹药区域(如果有)[m
[31m-            roi_rect = yaml_cv_params.get("roi_rect")[m
[32m+[m[32m            # AssaultCube 直接用绝对 bbox[m
[32m+[m[32m            roi_rect = yaml_cv_params.get("ammo_bbox") or \[m
[32m+[m[32m                       self.get_target_specific_param("ammo_bbox")[m
             [m
             # 获取过滤器类型[m
[31m-            filter_type = yaml_cv_params.get("filter_type", "hsv")[m
[32m+[m[32m            filter_type = yaml_cv_params.get("ammo_filter_type", "gray")[m
             [m
             # 构建文件名后缀用于调试[m
             filename_suffix = ""[m
[36m@@ -287,16 +288,19 @@[m [mclass LogicLayer:[m
                 filename_suffix = f"img_{int(time.time())}"[m
             [m
             # 使用VisionUtils读取文本[m
[31m-            # 将调试目录传递给OCR函数[m
[32m+[m[32m            # 添加额外的cv_params参数，确保完整传递所有需要的参数[m
             ocr_text = VisionUtils.readTextFromPicture([m
[31m-                screenshot, [m
[31m-                roi_rect, [m
[31m-                filter_type, [m
[31m-                yaml_cv_params, [m
[31m-                debugEnabled, [m
[31m-                filename_suffix, [m
[31m-                debug_dir[m
[31m-                [m
[32m+[m[32m                srcImg=screenshot,[m[41m [m
[32m+[m[32m                boundingBox=roi_rect,[m[41m [m
[32m+[m[32m                filter_type=filter_type,[m[41m [m
[32m+[m[32m                context={**yaml_cv_params,[m
[32m+[m[32m                        "psm": yaml_cv_params.get("psm", 7),[m
[32m+[m[32m                        "whitelist": yaml_cv_params.get("whitelist", "0123456789")},[m
[32m+[m[32m                cv_params=yaml_cv_params,  # 明确传递cv_params[m
[32m+[m[32m                do_imgProcessing=True,     # 明确指定进行图像处理[m
[32m+[m[32m                debugEnabled=debugEnabled,[m[41m [m
[32m+[m[32m                filename_suffix=filename_suffix,[m[41m [m
[32m+[m[32m                debug_dir=debug_dir        # 确保debug_dir参数正确传递[m
             )[m
             [m
             # 将OCR结果保存到context中以便在测试循环中使用[m
[36m@@ -433,12 +437,18 @@[m [mclass LogicLayer:[m
             return None[m
 [m
 if __name__ == "__main__":[m
[32m+[m[32m    import datetime  # 导入datetime以获取本地时间[m
[32m+[m[41m    [m
     # 配置日志[m
     logger.add("test_debug.log", level="DEBUG", rotation="1 MB")[m
     logger.info("开始AssaultCube视觉检测调试")[m
     [m
[32m+[m[32m    # 获取当前脚本的绝对路径和基础目录[m
[32m+[m[32m    current_script_path = os.path.abspath(__file__)[m
[32m+[m[32m    base_dir = os.path.dirname(current_script_path)[m
[32m+[m[41m    [m
     # 加载配置[m
[31m-    config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "config.yaml")[m
[32m+[m[32m    config_path = os.path.join(base_dir, "config.yaml")[m
     try:[m
         with open(config_path, 'r', encoding='utf-8') as f:[m
             config = yaml.safe_load(f)[m
[36m@@ -450,11 +460,28 @@[m [mif __name__ == "__main__":[m
     [m
     logger.info(f"当前测试目标: {active_target}")[m
     [m
[31m-    # 创建目标特定的调试目录[m
[31m-    debug_base_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "debug")[m
[31m-    target_debug_dir = os.path.join(debug_base_dir, active_target)  # 创建目标子目录，例如 debug/assaultcube/[m
[31m-    os.makedirs(target_debug_dir, exist_ok=True)[m
[31m-    logger.info(f"创建目标特定调试目录: {target_debug_dir}")[m
[32m+[m[32m    # 创建带有本地时间戳的调试目录结构[m
[32m+[m[32m    current_time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")[m
[32m+[m[32m    # 注意：使用绝对路径确保调试目录位置正确[m
[32m+[m[32m    debug_base_dir = os.path.join(base_dir, "debug")[m
[32m+[m[41m    [m
[32m+[m[32m    # 创建准星和弹药测试的专用目录[m
[32m+[m[32m    crosshair_base_dir = os.path.join(debug_base_dir, "crosshair_tests")[m
[32m+[m[32m    ammo_base_dir = os.path.join(debug_base_dir, "ammo_tests")[m
[32m+[m[41m    [m
[32m+[m[32m    # 为本轮测试创建带时间戳的子目录[m
[32m+[m[32m    current_crosshair_dir = os.path.join(crosshair_base_dir, f"test_{current_time}")[m
[32m+[m[32m    current_ammo_dir = os.path.join(ammo_base_dir, f"test_{current_time}")[m
[32m+[m[41m    [m
[32m+[m[32m    # 创建所有必要的目录[m
[32m+[m[32m    os.makedirs(crosshair_base_dir, exist_ok=True)[m
[32m+[m[32m    os.makedirs(ammo_base_dir, exist_ok=True)[m
[32m+[m[32m    os.makedirs(current_crosshair_dir, exist_ok=True)[m
[32m+[m[32m    os.makedirs(current_ammo_dir, exist_ok=True)[m
[32m+[m[41m    [m
[32m+[m[32m    logger.info(f"创建测试特定调试目录:")[m
[32m+[m[32m    logger.info(f"准星测试目录: {current_crosshair_dir}")[m
[32m+[m[32m    logger.info(f"弹药测试目录: {current_ammo_dir}")[m
     [m
     # 初始化LogicLayer[m
     logicLayer = LogicLayer(active_target, config)[m
[36m@@ -462,7 +489,7 @@[m [mif __name__ == "__main__":[m
     # 测试准星检测[m
     logger.info("===== 准星检测测试 =====")[m
     # 拼接完整路径[m
[31m-    full_base_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), [m
[32m+[m[32m    full_base_path = os.path.join(base_dir,[m[41m [m
                                   config.get('targets', {}).get(active_target, {}).get('screenshot_base_path', 'unitTestResources'))[m
     crosshair_images = glob.glob(os.path.join(full_base_path, 'Crosshair', '*.png'))[m
     [m
[36m@@ -486,13 +513,13 @@[m [mif __name__ == "__main__":[m
             context = {'screenshotFile': image_path}[m
             expected_answer = {"boolResult": "True" if expected_result else "False"}[m
             [m
[31m-            # 进行测试[m
[32m+[m[32m            # 进行测试 - 使用准星专用目录[m
             isMatching = logicLayer.testWeaponCrossPresence([m
                 [screenshot], [m
                 context, [m
                 expected_answer, [m
                 debugEnabled=True,[m
[31m-                debug_dir=target_debug_dir[m
[32m+[m[32m                debug_dir=current_crosshair_dir[m
             )[m
             [m
             # 比较结果[m
[36m@@ -534,17 +561,20 @@[m [mif __name__ == "__main__":[m
                 logger.warning(f"无法加载图像: {image_path}")[m
                 continue[m
                 [m
[31m-            # 构造测试上下文[m
[32m+[m[32m            # 构造测试上下文，使用原始文件名作为标识，而不是时间戳[m
             context = {'screenshotFile': image_path}[m
             expected_answer = {"intResult": expected_ammo}[m
             [m
[31m-            # 进行测试，记录OCR的原始结果[m
[32m+[m[32m            # 进行测试 - 使用弹药专用目录，确保它是绝对路径[m
[32m+[m[32m            logger.debug(f"弹药测试使用调试目录: {current_ammo_dir}")[m
[32m+[m[41m            [m
[32m+[m[32m            # 进行测试 - 使用弹药专用目录[m
             actual_result = logicLayer.testAmmoTextInSync([m
                 [screenshot], [m
                 context, [m
                 expected_answer, [m
                 debugEnabled=True,[m
[31m-                debug_dir=target_debug_dir[m
[32m+[m[32m                debug_dir=current_ammo_dir[m
             )[m
             [m
             # 从context获取OCR结果[m
